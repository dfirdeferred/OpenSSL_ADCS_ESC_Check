#!/usr/bin/env bash
set -euo pipefail

OID_UPN="1.3.6.1.4.1.311.20.2.3"           # UPN SAN
OID_REQUEST_AGENT="1.3.6.1.4.1.311.20.2.1" # Certificate Request Agent EKU
OID_APP_POLICIES="1.3.6.1.4.1.311.21.10"   # Microsoft Application Policies
OID_CLIENTAUTH="1.3.6.1.5.5.7.3.2"         # clientAuth EKU
PRIV_REGEX_DEFAULT="(CN=Administrator|CN=krbtgt|Domain Admins|Enterprise Admins|UPN=.*admin@|svc-.*-admin)"

DANGER_OIDS_FILE=""
PRIV_REGEX="$PRIV_REGEX_DEFAULT"
EVIDENCE=0
HTML_OUT=""

usage() {
  cat <<EOF
Usage: $0 [--danger-oids FILE] [--priv-pattern 'regex'] [--evidence] [--evidence-html out.html] <file-or-dir> [...]

Scans X.509 certs (PEM/DER) for ESC indicators: 1-3,6,9,10,13,15

Options:
  --danger-oids FILE     File with one OID per line to flag for ESC13 (policy OIDs).
  --priv-pattern REGEX   Regex for privileged-looking identities (default shown in script).
  --evidence             Print exact blocks (Subject, SAN, EKU, Policies, App Policies).
  --evidence-html FILE   Write a styled HTML report with the same evidence.
EOF
}

emit_html_start() {
  local f="$1"
  cat > "$f" <<'HTML'
<!doctype html><html lang="en"><head><meta charset="utf-8">
<title>ESC Check Report</title>
<style>
  body{font-family:Inter,Segoe UI,Arial,sans-serif;margin:24px;color:#0f172a;background:#ffffff}
  h1{font-size:20px;margin:0 0 12px}
  .card{border:1px solid #e2e8f0;border-radius:12px;margin:16px 0;padding:16px}
  .path{color:#475569;font-size:12px;margin-bottom:8px}
  .flags{margin:8px 0 12px}
  .flag{display:inline-block;background:#eef2ff;color:#3730a3;border:1px solid #c7d2fe;border-radius:999px;padding:4px 10px;margin:2px;font-size:12px}
  .kv{margin:4px 0}
  pre{background:#0b1020;color:#e2e8f0;padding:12px;border-radius:8px;overflow:auto}
  .note{color:#334155;font-size:13px;margin:6px 0}
  .warn{color:#b45309}
  .ok{color:#047857}
  .badge{display:inline-block;padding:2px 8px;border-radius:999px;background:#f1f5f9;color:#0f172a;border:1px solid #e2e8f0;font-size:12px}
  .header{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}
</style></head><body>
<div class="header">
  <h1>AD CS ESC Indicators Report</h1>
  <span class="badge">Generated by esc_check.sh</span>
</div>
HTML
}

emit_html_end() {
  local f="$1"
  echo "</body></html>" >> "$f"
}

emit_card() {
  local f="$1" path="$2" subject="$3" flags="$4" policy_list="$5"
  echo "<div class=\"card\">" >> "$f"
  echo "  <div class=\"path\">$path</div>" >> "$f"
  [[ -n "$subject" ]] && echo "  <div class=\"kv\"><strong>Subject:</strong> ${subject#*Subject: }</div>" >> "$f"
  [[ -n "$policy_list" ]] && echo "  <div class=\"kv\"><strong>Policy OIDs:</strong> $policy_list</div>" >> "$f"
  if [[ -n "$flags" ]]; then
    echo "  <div class=\"flags\">" >> "$f"
    for fl in $flags; do echo "    <span class=\"flag\">$fl</span>" >> "$f"; done
    echo "  </div>" >> "$f"
  fi
}

emit_block() {
  local f="$1" title="$2" content="$3"
  [[ -z "$content" ]] && return 0
  echo "  <div class=\"kv\"><strong>$title</strong></div>" >> "$f"
  echo "  <pre>" >> "$f"
  echo "$content" >> "$f"
  echo "  </pre>" >> "$f"
}

emit_notes() {
  local f="$1" note="$2"
  echo "  <div class=\"note\">$note</div>" >> "$f"
}

emit_card_close() {
  local f="$1"
  echo "</div>" >> "$f"
}

# Parse args
ARGS=()
while (( "$#" )); do
  case "$1" in
    --danger-oids) DANGER_OIDS_FILE="$2"; shift 2;;
    --priv-pattern) PRIV_REGEX="$2"; shift 2;;
    --evidence) EVIDENCE=1; shift;;
    --evidence-html) HTML_OUT="$2"; shift 2;;
    -h|--help) usage; exit 0;;
    *) ARGS+=("$1"); shift;;
  esac
done
if [ ${#ARGS[@]} -eq 0 ]; then usage; exit 1; fi

# Load ESC13 danger OIDs
declare -A DANGER_OIDS
if [[ -n "$DANGER_OIDS_FILE" && -f "$DANGER_OIDS_FILE" ]]; then
  while read -r line; do
    [[ -z "$line" || "$line" =~ ^# ]] && continue
    DANGER_OIDS["$line"]=1
  done < "$DANGER_OIDS_FILE"
fi

collect_files() {
  local p="$1"
  if [ -d "$p" ]; then
    find "$p" -type f \( -iname "*.cer" -o -iname "*.crt" -o -iname "*.pem" -o -iname "*.der" \)
  else
    echo "$p"
  fi
}

openssl_text() {
  local f="$1"
  if openssl x509 -in "$f" -text -noout 2>/dev/null; then
    return 0
  else
    openssl x509 -in "$f" -inform der -text -noout 2>/dev/null
  fi
}

block() { # print lines from marker up to N lines
  local dump="$1" marker="$2" count="${3:-12}"
  echo "$dump" | sed -n "/$marker/,+${count}p"
}

# HTML header
[[ -n "$HTML_OUT" ]] && emit_html_start "$HTML_OUT"

check_file() {
  local f="$1"
  local dump="$(openssl_text "$f" || true)"
  echo -e "\n[$f]"
  if [[ -z "$dump" ]]; then
    echo "  ERROR: Not a readable certificate (PEM/DER)."
    if [[ -n "$HTML_OUT" ]]; then
      emit_card "$HTML_OUT" "$f" "" "" ""
      emit_notes "$HTML_OUT" "<span class=\"warn\">ERROR:</span> Not a readable certificate (PEM/DER)."
      emit_card_close "$HTML_OUT"
    fi
    return
  fi

  local subject="$(echo "$dump" | grep -m1 '^ *Subject:' || true)"
  [[ -n "$subject" ]] && echo "  Subject: ${subject# *}"

  local flags_arr=()
  local san_block="$(block "$dump" "Subject Alternative Name" 6)"
  local eku_block="$(block "$dump" "Extended Key Usage" 4)"
  local pol_block="$(block "$dump" "Certificate Policies" 12)"
  local app_pol_block="$(block "$dump" "$OID_APP_POLICIES" 4)"

  # ESC3
  if echo "$dump" | grep -q "$OID_REQUEST_AGENT"; then
    flags_arr+=("ESC3")
    echo "  ESC3: Request Agent EKU present."
  fi

  # ESC6
  if echo "$dump" | grep -q "$OID_UPN"; then
    flags_arr+=("ESC6")
    echo "  ESC6: UPN SAN present."
  fi

  # ESC9
  if ! echo "$dump" | grep -q 'Extended Key Usage'; then
    flags_arr+=("ESC9")
    echo "  ESC9: No EKU (implicitly any purpose)."
  fi

  # ESC10 suspected
  local PRIV_HIT=""
  if echo "$dump" | grep -Eqi "$PRIV_REGEX"; then
    flags_arr+=("ESC10?")
    PRIV_HIT="yes"
    echo "  ESC10 suspected: privileged-looking Subject/SAN."
  fi

  # ESC13
  local pol_oids=""
  if [[ -n "$pol_block" ]]; then
    pol_oids="$(echo "$pol_block" | grep -Eo '([0-9]+\.)+[0-9]+' | sort -u | tr '\n' ' ' | sed 's/ $//')"
    if [[ -n "$pol_oids" ]]; then
      for oid in $pol_oids; do
        if [[ -n "${DANGER_OIDS[$oid]+x}" ]]; then
          flags_arr+=("ESC13")
          break
        fi
      done
      echo "  Policies present: $pol_oids"
    fi
  fi

  # ESC15
  if echo "$dump" | grep -q "$OID_APP_POLICIES"; then
    if echo "$dump" | grep -q "$OID_CLIENTAUTH"; then
      flags_arr+=("ESC15")
      echo "  ESC15: App Policies include clientAuth."
    else
      echo "  Application Policies present (review contents)."
    fi
  fi

  # ESC1 suspected (privileged UPN + assumption of enrollee-supplied subject)
  if echo "$dump" | grep -q "$OID_UPN" && [[ -n "$PRIV_HIT" ]]; then
    flags_arr+=("ESC1?")
  fi

  local flags_line="${flags_arr[*]}"
  echo "  => Flags: ${flags_line:-None}"

  # HTML card
  if [[ -n "$HTML_OUT" ]]; then
    emit_card "$HTML_OUT" "$f" "$subject" "$flags_line" "$pol_oids"
    [[ $EVIDENCE -eq 1 ]] && emit_block "$HTML_OUT" "Subject" "$subject"
    [[ $EVIDENCE -eq 1 ]] && emit_block "$HTML_OUT" "Subject Alternative Name" "$san_block"
    [[ $EVIDENCE -eq 1 ]] && emit_block "$HTML_OUT" "Extended Key Usage" "$eku_block"
    [[ $EVIDENCE -eq 1 ]] && emit_block "$HTML_OUT" "Certificate Policies" "$pol_block"
    [[ $EVIDENCE -eq 1 ]] && emit_block "$HTML_OUT" "Application Policies ($OID_APP_POLICIES)" "$app_pol_block"
    emit_card_close "$HTML_OUT"
  fi
}

for p in "${ARGS[@]}"; do
  while IFS= read -r f; do
    check_file "$f"
  done < <(collect_files "$p")
done

[[ -n "$HTML_OUT" ]] && emit_html_end "$HTML_OUT" && echo "HTML report written to: $HTML_OUT"
